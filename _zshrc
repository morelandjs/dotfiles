#
# ~/.zshrc
#

# Determine if machine is MacOS or Linux
# Output is stored in the "machine" variable
uname="$(uname -s)"
case "${uname}" in
  Linux*)	machine=Linux;;
  Darwin*)	machine=Mac;;
  *)		machine=Unknown;;
esac

# ls colors
if [[ $machine == "Mac" ]]
then
  eval $(gdircolors ~/.dircolors)
else
  eval $(dircolors ~/.dircolors)
fi

# environment variales
export PATH=~/.local/bin:$PATH

# history

# oh-my-zsh settings
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history


# prompt

autoload -U colors && colors
setopt prompt_subst

# left main prompt

# set color of username: root or normal user
if [[ $UID == 0 ]]; then
  user_color=$fg[red]
else
  user_color=$fg[blue]
fi

# set color of hostname: local or ssh
if [[ -n "$SSH_CLIENT" ]]; then
  host_color=$fg[yellow]
else
  host_color=$fg[blue]
fi

# other colors
sep_color=$reset_color
path_color=$fg[blue]
ret_color=$fg[red]
accent_color=$fg[green]

PROMPT="%{$user_color%}%n%{$sep_color%}@%{$host_color%}%m%{$sep_color%}:%{$path_color%}%~ %(?..%{$ret_color%}%? )%{$accent_color%}> %{$reset_color%}"

# right git prompt

# color and symbol settings
GIT_PROMPT_AHEAD="%{$fg[red]%}+"
GIT_PROMPT_BEHIND="%{$fg[cyan]%}-"
GIT_PROMPT_MERGING="%{$fg[magenta]%}⚡︎"
GIT_SYMBOL="▪"
GIT_PROMPT_UNTRACKED="%{$fg[red]%}$GIT_SYMBOL"
GIT_PROMPT_MODIFIED="%{$fg[yellow]%}$GIT_SYMBOL"
GIT_PROMPT_STAGED="%{$fg[green]%}$GIT_SYMBOL"
GIT_PROMPT_EMPTY="%{$fg[blue]%}$GIT_SYMBOL"


# find git branch/tag, or name-rev if on detached head
_git_branch () {
  (git symbolic-ref -q HEAD || git name-rev --name-only --no-undefined --always HEAD) 2> /dev/null
}

# show different symbols as appropriate for various git states
_git_state () {
  local GIT_STATE=""

  local NUM_AHEAD="$(git log --oneline @{u}.. 2> /dev/null | wc -l | tr -d ' ')"
  [ "$NUM_AHEAD" -gt 0 ] && GIT_STATE=$GIT_STATE$GIT_PROMPT_AHEAD$NUM_AHEAD

  local NUM_BEHIND="$(git log --oneline ..@{u} 2> /dev/null | wc -l | tr -d ' ')"
  [ "$NUM_BEHIND" -gt 0 ] && GIT_STATE=$GIT_STATE$GIT_PROMPT_BEHIND$NUM_BEHIND

  local GIT_DIR="$(git rev-parse --git-dir 2> /dev/null)"
  [ -n $GIT_DIR ] && test -r $GIT_DIR/MERGE_HEAD && GIT_STATE=$GIT_STATE$GIT_PROMPT_MERGING

  [[ -n $(git ls-files --other --exclude-standard 2> /dev/null) ]] && GIT_STATE=$GIT_STATE$GIT_PROMPT_UNTRACKED

  git diff --quiet 2> /dev/null || GIT_STATE=$GIT_STATE$GIT_PROMPT_MODIFIED

  git diff --cached --quiet 2> /dev/null || GIT_STATE=$GIT_STATE$GIT_PROMPT_STAGED

  [[ -n $GIT_STATE ]] || GIT_STATE=$GIT_PROMPT_EMPTY

  echo "$GIT_STATE"
}

# make prompt if inside a git repository
_git_prompt () {
  local git_where="$(_git_branch)"
  [ -n "$git_where" ] && echo "%{$path_color%}${git_where#(refs/heads/|tags/)}%{$sep_color%}:$(_git_state)%{$reset_color%}"
}

RPROMPT='$(_git_prompt)'


# aliases

# general
alias ps="ps -e"
alias grep="grep --color=auto"
alias locate="locate -i"
alias df="df -h"
alias di="di -I ext4,btrfs -f SMbuvpt -H -t"
alias killall="killall -v"
alias pgrep="pgrep -a"

# mac specific (may require additional dependencies)
if [[ $machine == "Mac" ]]; then
  alias ls="gls --color=auto --group-directories-first"
else
  alias ls="ls --color=auto --group-directories-first"
fi

# single letter commands
alias c="clear"
alias -g vim="nvim"
alias q="exit"
